import React, {useCallback, useState} from 'react';
import Link from 'next/link';
import {cl, formatAmount, toNormalizedBN} from '@builtbymom/web3/utils';
import useAPR from '@libHooks/useAPR';
import IconChevronPlain from '@libIcons/IconChevronPlain';
import {IconLinkOut} from '@yearn-finance/web-lib/icons/IconLinkOut';
import useBasket from '@yUSD/contexts/useBasket';
import useLST from '@yUSD/contexts/useLST';
import {formatDate} from '@yUSD/utils';

import {ImageWithFallback} from '../../../../lib/components/ImageWithFallback';

import type {AnimationScope} from 'framer-motion';
import type {ReactElement} from 'react';
import type {TSortDirection} from '@libUtils/types';

function LSTInPoolStats(): ReactElement {
	const {stats, TVL} = useLST();
	const {APR} = useAPR();
	const hasRampStopTime = Boolean(stats?.rampStopTime && stats?.rampStopTime > 0);

	return (
		<div className={'-mt-4 px-4 md:mt-10 md:px-72'}>
			<dl className={'text-neutral-0 grid grid-cols-3 flex-row gap-10 md:flex'}>
				<div>
					<dt className={'mb-2 text-xs'}>{'TVL'}</dt>
					<dd
						suppressHydrationWarning
						className={'font-number font-bold'}>
						{`${formatAmount(TVL, 0, 0)} USD`}
					</dd>
				</div>

				<div>
					<dt className={'mb-2 text-xs'}>{'APR'}</dt>
					<span className={'tooltip'}>
						<dd
							suppressHydrationWarning
							className={'font-number font-bold'}>
							{`~${formatAmount(APR, 2, 2)}%`}
						</dd>
						<span className={'tooltipLight !-inset-x-24 top-full mt-2 !w-auto'}>
							<div
								suppressHydrationWarning
								className={
									'text-neutral-0 w-fit rounded-md border border-neutral-700 bg-neutral-900 p-1 px-2 text-center text-xs font-medium'
								}>
								{
									"APY is calculated based on last week's yUSD yield generated by the protocol, streamed to st-yUSD holders this week"
								}
							</div>
						</span>
					</span>
				</div>

				<div>
					<dt className={'mb-2 text-xs'}>{'Swap Fee'}</dt>
					<dd
						suppressHydrationWarning
						className={'font-number font-bold'}>
						{`${formatAmount(toNormalizedBN(stats.swapFeeRate, 16).normalized, 2, 2)}%`}
					</dd>
				</div>

				<div>
					<dt className={'mb-2 text-xs'}>{'A'}</dt>
					<dd
						suppressHydrationWarning
						className={'font-number font-bold'}>
						{formatAmount(toNormalizedBN(stats.amplification, 18).normalized, 0, 0)}
					</dd>
				</div>

				{hasRampStopTime && (
					<>
						<div>
							<dt className={'mb-2 text-xs'}>{'Weight ramp ends on'}</dt>
							<dd
								className={'font-number font-bold'}
								suppressHydrationWarning>
								{formatDate(Number(stats.rampStopTime) * 1000)}
							</dd>
						</div>
					</>
				)}
			</dl>
		</div>
	);
}

function LSTInPool({scope}: {scope: AnimationScope}): ReactElement {
	const {basket} = useBasket();
	const [sortBy, set_sortBy] = useState<string>('ratio');
	const [sortDirection, set_sortDirection] = useState<TSortDirection>('');

	/* ðŸ”µ - Yearn Finance **************************************************************************
	 **	Callback method used to sort the pool token list.
	 **	The use of useCallback() is to prevent the method from being re-created on every render.
	 **********************************************************************************************/
	const onSort = useCallback((newSortBy: string, newSortDirection: string): void => {
		set_sortBy(newSortBy);
		set_sortDirection(newSortDirection as TSortDirection);
	}, []);

	/* ðŸ”µ - Yearn Finance **************************************************************************
	 **	Callback method used to toggle the sort direction.
	 **	By default, the sort direction is descending. If the user clicks on the same column again,
	 **	the sort direction will be toggled to ascending. If the user clicks on a different column,
	 **	the sort direction will be set to descending.
	 **********************************************************************************************/
	const toggleSortDirection = (newSortBy: string): TSortDirection => {
		return sortBy === newSortBy
			? sortDirection === ''
				? 'desc'
				: sortDirection === 'desc'
					? 'asc'
					: 'desc'
			: 'desc';
	};

	/* ðŸ”µ - Yearn Finance **************************************************************************
	 **	Callback method used to render the chevron icon.
	 **	The chevron color and direction will change depending on the sort direction.
	 **********************************************************************************************/
	const renderChevron = useCallback(
		(shouldSortBy: boolean): ReactElement => {
			if (shouldSortBy && sortDirection === 'desc') {
				return <IconChevronPlain className={cl('!text-neutral-0', 'yearn--sort-chevron transition-all')} />;
			}
			if (shouldSortBy && sortDirection === 'asc') {
				return (
					<IconChevronPlain
						className={cl('!text-neutral-0', 'yearn--sort-chevron rotate-180 transition-all')}
					/>
				);
			}
			return (
				<IconChevronPlain
					className={cl(
						'!text-neutral-100/30 group-hover:!text-neutral-0',
						'yearn--sort-chevron--off text-neutral-300 transition-all group-hover:text-neutral-500'
					)}
				/>
			);
		},
		[sortDirection]
	);

	return (
		<div
			ref={scope}
			className={'pointer-events-none flex h-0 min-h-0 flex-col opacity-0'}>
			<div className={'-mt-36'}>
				<LSTInPoolStats />

				<div className={'mt-10 grid grid-cols-2 flex-row gap-4 px-4 md:flex md:px-72'}>
					<Link
						href={`https://etherscan.io/address/${process.env.POOL_ADDRESS}`}
						target={'_blank'}>
						<div
							className={
								'border-neutral-0 text-neutral-0 hover:bg-neutral-0 hover:text-accent flex cursor-pointer flex-row items-center justify-center rounded border px-3 py-2 text-center text-xs transition-colors'
							}>
							{'Pool'}
							<IconLinkOut className={'ml-2 size-4'} />
						</div>
					</Link>

					<Link
						href={`https://etherscan.io/address/${process.env.YUSD_ADDRESS}`}
						target={'_blank'}>
						<div
							className={
								'border-neutral-0 text-neutral-0 hover:bg-neutral-0 hover:text-accent flex cursor-pointer flex-row items-center justify-center rounded border px-3 py-2 text-center text-xs transition-colors'
							}>
							{'yUSD'}
							<IconLinkOut className={'ml-2 size-4'} />
						</div>
					</Link>

					<Link
						href={`https://etherscan.io/address/${process.env.STYUSD_ADDRESS}`}
						target={'_blank'}>
						<div
							className={
								'border-neutral-0 text-neutral-0 hover:bg-neutral-0 hover:text-accent flex cursor-pointer flex-row items-center justify-center rounded border px-3 py-2 text-center text-xs transition-colors'
							}>
							{'st-yUSD'}
							<IconLinkOut className={'ml-2 size-4'} />
						</div>
					</Link>
				</div>

				<div className={'text-neutral-0 mt-10 w-full rounded bg-neutral-100/10 py-10'}>
					<div className={'mb-4 px-4 md:px-72'}>
						<h2 className={'text-2xl font-bold'}>{'LSTs in Pool'}</h2>
					</div>

					<div className={'hidden grid-cols-12 gap-10 px-4 md:grid md:px-72'}>
						<div className={'col-span-4'}>
							<p className={'text-xs'}>{'Token'}</p>
						</div>

						<button
							onClick={(): void => onSort('amount', toggleSortDirection('amount'))}
							className={'group col-span-2 -mr-1.5 flex cursor-pointer flex-row justify-end'}>
							<p className={'text-right text-xs'}>{'Amount in pool'}</p>
							<span className={'pl-2'}>{renderChevron(sortBy === 'amount')}</span>
						</button>

						<button
							onClick={(): void => onSort('beaconEqu', toggleSortDirection('beaconEqu'))}
							className={'group col-span-2 -mr-1.5 flex cursor-pointer flex-row justify-end'}>
							<p className={'text-right text-xs'}>{'Composition'}</p>
							<span className={'pl-2'}>{renderChevron(sortBy === 'beaconEqu')}</span>
						</button>

						<button
							onClick={(): void => onSort('currentWeight', toggleSortDirection('currentWeight'))}
							className={'group col-span-2 -mr-1.5 flex cursor-pointer flex-row justify-end'}>
							<p className={'text-right text-xs'}>{'Weight'}</p>
							<span className={'pl-2'}>{renderChevron(sortBy === 'currentWeight')}</span>
						</button>

						<button className={'col-span-2 -mr-1.5 flex cursor-pointer flex-row justify-end'}>
							<p className={'text-right text-xs'}>{'Bands (-/+ %)'}</p>
						</button>
					</div>

					<div className={'divide-neutral-0/20 mt-6 grid divide-y md:divide-y-0'}>
						{[...basket]
							.sort((a, b): number => {
								if (sortBy === 'ratio') {
									return sortDirection === 'desc'
										? Number(a.weightRatio) - Number(b.weightRatio)
										: Number(b.weightRatio) - Number(a.weightRatio);
								}
								if (sortBy === 'amount') {
									return sortDirection === 'desc'
										? Number(b.virtualPoolSupply.normalized) -
												Number(a.virtualPoolSupply.normalized)
										: Number(a.virtualPoolSupply.normalized) -
												Number(b.virtualPoolSupply.normalized);
								}
								if (sortBy === 'weight') {
									return sortDirection === 'desc'
										? Number(b.targetWeight.normalized) - Number(a.targetWeight.normalized)
										: Number(a.targetWeight.normalized) - Number(b.targetWeight.normalized);
								}
								return 0;
							})
							.map((token): ReactElement => {
								return (
									<Link
										key={token.address}
										href={`https://etherscan.io/address/${token.address}`}
										target={'_blank'}>
										<div
											className={
												'grid grid-cols-6 gap-2 px-4 py-6 hover:bg-neutral-100/10 md:grid-cols-12 md:gap-10 md:px-72 md:py-3'
											}>
											<div className={'col-span-4 flex flex-row items-center'}>
												<div className={'size-10 min-w-[40px]'}>
													<ImageWithFallback
														alt={token.name}
														unoptimized
														src={token.logoURI || ''}
														altSrc={`${process.env.SMOL_ASSETS_URL}/token/${Number(process.env.DEFAULT_CHAIN_ID)}/${token?.address}/logo-32.png`}
														width={40}
														height={40}
													/>
												</div>
												<p className={'pl-6'}>{token.symbol}</p>
											</div>

											<div
												className={
													'col-span-6 flex w-full flex-row items-center justify-between md:col-span-2 md:justify-end'
												}>
												<div className={'flex md:hidden'}>
													<p className={'text-neutral-0/60 text-xs'}>{'Amount in pool'}</p>
												</div>
												<div className={'font-number text-right'}>
													<b suppressHydrationWarning>
														{`${formatAmount(
															token.poolStats?.amountInPool.normalized || 0,
															6,
															6
														)}`}
													</b>
													<small
														className={'text-neutral-0/60 block whitespace-nowrap'}
														suppressHydrationWarning>
														{`~${formatAmount(
															Number(
																token.poolStats?.currentBeaconEquivalentValue
																	.normalized || 0
															),
															6,
															6
														)} ETH`}
													</small>
												</div>
											</div>

											<div
												className={
													'col-span-6 flex w-full flex-row items-center justify-between md:col-span-2 md:justify-end'
												}>
												<div className={'flex md:hidden'}>
													<p className={'text-neutral-0/60 text-xs'}>{'Composition'}</p>
												</div>
												<div className={'font-number text-right'}>
													<b suppressHydrationWarning>
														{`${formatAmount(
															Number(token.poolStats?.amountInPoolPercent || 0),
															2,
															2
														)}%`}
													</b>
													<small
														className={'text-neutral-0/60 block'}
														suppressHydrationWarning>
														&nbsp;
													</small>
												</div>
											</div>

											<div
												className={
													'col-span-6 flex w-full flex-row items-center justify-between md:col-span-2 md:justify-end'
												}>
												<div className={'flex md:hidden'}>
													<p className={'text-neutral-0/60 text-xs'}>
														{'Current weight -> Target'}
													</p>
												</div>
												<div className={'font-number text-right'}>
													<b suppressHydrationWarning>
														{`${formatAmount(
															Number(
																token.poolStats?.currentEquilibrumWeight.normalized || 0
															) * 100,
															2,
															2
														)}%`}
													</b>
													<small
														className={'text-neutral-0/60 block'}
														suppressHydrationWarning>
														{`Target: ${formatAmount(
															Number(token.poolStats?.weightRamps.normalized || 0) * 100,
															2,
															2
														)}%`}
													</small>
												</div>
											</div>

											<div
												className={
													'col-span-6 flex w-full flex-row items-center justify-between md:col-span-2 md:justify-end'
												}>
												<div className={'flex md:hidden'}>
													<p className={'text-neutral-0/60 text-xs'}>{'Bands (+/- %)'}</p>
												</div>
												<div className={'font-number text-right'}>
													<b suppressHydrationWarning>
														{`${formatAmount(
															Number(token.poolStats?.currentBandPlus.normalized || 0) *
																100,
															2,
															2
														)}% - ${formatAmount(
															Number(token.poolStats?.currentBandMin.normalized || 0) *
																100,
															2,
															2
														)}%`}
													</b>
													<small
														className={'text-neutral-0/60 block'}
														suppressHydrationWarning>
														&nbsp;
													</small>
												</div>
											</div>
										</div>
									</Link>
								);
							})}
					</div>
				</div>
			</div>
		</div>
	);
}

export default LSTInPool;
